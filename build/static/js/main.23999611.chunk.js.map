{"version":3,"sources":["index.js"],"names":["Square","props","className","ClassName","onClick","Board","state","squares","Array","fill","blueIsNext","i","this","slice","calculateWinner","setState","handleClick","status","winner","renderSquare","React","Component","Game","lines","length","a","b","c","d","ReactDOM","render","document","getElementById"],"mappings":"8MAMA,SAASA,EAAOC,GACd,OACE,aADM,CACN,UAAQC,UAAWD,EAAME,UAAWC,QAASH,EAAMG,U,IAMjDC,E,kDACJ,WAAYJ,GAAQ,IAAD,8BACjB,cAAMA,IACDK,MAAQ,CACXC,QAASC,MAAM,IAAIC,KAAK,MACxBC,YAAY,GAJG,E,+CAQnB,SAAYC,GACV,IAAMJ,EAAUK,KAAKN,MAAMC,QAAQM,QAC/BC,EAAgBP,IAAYA,EAAQI,KAGxCJ,EAAQI,GAAKC,KAAKN,MAAMI,WAAa,OAAS,MAC9CE,KAAKG,SAAS,CACZR,QAASA,EACTG,YAAaE,KAAKN,MAAMI,gB,0BAK5B,SAAaC,GAAI,IAAD,OACd,OACE,cAACX,EAAD,CACEG,UAAWS,KAAKN,MAAMC,QAAQI,GAC9BP,QAAS,kBAAM,EAAKY,YAAYL,Q,oBAKtC,WAEE,IACIM,EADEC,EAASJ,EAAgBF,KAAKN,MAAMC,SAS1C,OANEU,EADEC,EACO,WAAaA,EAEb,iBAAmBN,KAAKN,MAAMI,WAAa,OAAS,OAK7D,gCACE,qBAAKR,UAAU,SAAf,SAAyBe,IACzB,sBAAKf,UAAU,YAAf,UACGU,KAAKO,aAAa,GAClBP,KAAKO,aAAa,GAClBP,KAAKO,aAAa,GAClBP,KAAKO,aAAa,MAErB,sBAAKjB,UAAU,YAAf,UACGU,KAAKO,aAAa,GAClBP,KAAKO,aAAa,GAClBP,KAAKO,aAAa,GAClBP,KAAKO,aAAa,MAErB,sBAAKjB,UAAU,YAAf,UACGU,KAAKO,aAAa,GAClBP,KAAKO,aAAa,GAClBP,KAAKO,aAAa,IAClBP,KAAKO,aAAa,OAErB,sBAAKjB,UAAU,YAAf,UACGU,KAAKO,aAAa,IAClBP,KAAKO,aAAa,IAClBP,KAAKO,aAAa,IAClBP,KAAKO,aAAa,c,GAnETC,IAAMC,WA2EpBC,E,4JACJ,WACE,OACE,sBAAKpB,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACG,EAAD,MAEF,sBAAKH,UAAU,YAAf,UACE,wBACA,iC,GATSkB,IAAMC,WAsBzB,SAASP,EAAgBP,GAavB,IAXA,IAAMgB,EAAQ,CACZ,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,GAAI,IACX,CAAC,GAAI,GAAI,GAAI,IACb,CAAC,EAAG,EAAG,EAAG,IACV,CAAC,EAAG,EAAG,EAAG,IACV,CAAC,EAAG,EAAG,GAAI,IACX,CAAC,EAAG,EAAG,GAAI,KAGJZ,EAAI,EAAGA,EAAIY,EAAMC,OAAQb,IAAK,CACrC,kBAAqBY,EAAMZ,GAA3B,GAAOc,EAAP,KAAUC,EAAV,KAAaC,EAAb,KAAgBC,EAAhB,KACA,GAAIrB,EAAQkB,IAAMlB,EAAQkB,KAAOlB,EAAQmB,IAAMnB,EAAQkB,KAAOlB,EAAQoB,IAAKpB,EAAQkB,KAAOlB,EAAQqB,GAChG,OAAOrB,EAAQkB,GAGnB,OAAO,KAzBTI,IAASC,OACP,cAACR,EAAD,IACAS,SAASC,eAAe,W","file":"static/js/main.23999611.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';//importing the css file for formating\n\n\n//creating a square(button) function instead of class since things are getting rendered in other classes, thus there would be redundency\nfunction Square(props) {\n  return (//className can be altered, so we can assign different classes to each button, so we can change colour\n    <button className={props.ClassName} onClick={props.onClick}>\n    </button>\n  );\n}\n\n//class for th board\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {//lifting the state to the parent component. to keep children components in sync\n      squares: Array(16).fill(null),\n      blueIsNext: true,//initializes the first state as blue's turn\n    };\n  }\n\n  handleClick(i) {\n    const squares = this.state.squares.slice();//implements immutability to make this much simpler and cleaner\n    if (calculateWinner(squares) || squares[i]) {//checks if theres a winner\n      return;\n    }\n    squares[i] = this.state.blueIsNext ? 'Blue' : 'Red';//sets the value for the pressed button\n    this.setState({\n      squares: squares,\n      blueIsNext: !this.state.blueIsNext,//flips the value for the next button\n    });\n  }\n\n  //property passing mechanism to modify each square based on the selected props\n  renderSquare(i) {\n    return (\n      <Square\n        ClassName={this.state.squares[i]}//sets the class name to the current state, this allows us to set the colour\n        onClick={() => this.handleClick(i)}//on click calls upon the handle click method\n      />\n    );\n  }\n\n  render() {\n    //consistently checks if theres a winner, if there is update the header, if there isn't update the ehader to show which player is next\n    const winner = calculateWinner(this.state.squares);\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.blueIsNext ? 'Blue' : 'Red');\n    }\n\n    //renders all the buttons on the screen\n    return (\n      <div>\n        <div className=\"status\">{status}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n          {this.renderSquare(3)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(8)}\n          {this.renderSquare(9)}\n          {this.renderSquare(10)}\n          {this.renderSquare(11)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(12)}\n          {this.renderSquare(13)}\n          {this.renderSquare(14)}\n          {this.renderSquare(15)}\n        </div>\n      </div>\n    );\n  }\n}\n\n//puts everything in one class \nclass Game extends React.Component {\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n        <div className=\"game-info\">\n          <div>{/* status */}</div>\n          <ol>{/* TODO */}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(//renders the game\n  <Game />,\n  document.getElementById('root')\n);\n\n//checking if there is a winner function\nfunction calculateWinner(squares) {\n  //lists all possible winning senarios \n  const lines = [\n    [0, 1, 2, 3],\n    [4, 5, 6, 7],\n    [8, 9, 10, 11],\n    [12, 13, 14, 15],\n    [0, 4, 8, 12],\n    [1, 5, 9, 13],\n    [2, 6, 10, 14],\n    [3, 7, 11, 15],\n  ];\n  //checks if the lines match any set of picks by the players\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c, d] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]&& squares[a] === squares[d]) {\n      return squares[a];\n    }\n  }\n  return null;\n}"],"sourceRoot":""}